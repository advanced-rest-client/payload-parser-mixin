{
  "schema_version": "1.0.0",
  "mixins": [
    {
      "description": "A behavior to be implemented to elements that needs to parse\nrequest / response body.\nIt contains functions to encode / decode form data and to escape HTML.",
      "summary": "",
      "path": "payload-parser-mixin.js",
      "properties": [
        {
          "name": "AMP_RE",
          "type": "?",
          "description": "Regexp to search for the `&` character",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "GT_RE",
          "type": "?",
          "description": "Regexp to search for the `>` character",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 48,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "LT_RE",
          "type": "?",
          "description": "Regexp to search for the `<` character",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 4
            },
            "end": {
              "line": 55,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "SQUOT_RE",
          "type": "?",
          "description": "Regexp to search for the `'` character",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 4
            },
            "end": {
              "line": 62,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "QUOT_RE",
          "type": "?",
          "description": "Regexp to search for the `\"` character",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 69,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "htmlEscape",
          "description": "Escape HTML to save HTML text.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 4
            },
            "end": {
              "line": 93,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "html",
              "type": "String",
              "description": "A HTML string to be escaped."
            }
          ],
          "return": {
            "type": "String"
          }
        },
        {
          "name": "formArrayToString",
          "description": "Parse input array to string x-www-form-urlencoded.\n\nNote that this function doesn't encodes the name and value. Use\n`this.formArrayToString(this.encodeUrlEncoded(arr))`\nto create a encoded string from the array.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 4
            },
            "end": {
              "line": 117,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr",
              "type": "Array.<Object>",
              "description": "Input array. Each element must contain an\nobject with `name` and `value` keys."
            }
          ],
          "return": {
            "type": "String",
            "desc": "A parsed string of `name`=`value` pairs of the input objects."
          }
        },
        {
          "name": "_modelItemToFormDataString",
          "description": "Creates a form data string for a single item.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 4
            },
            "end": {
              "line": 141,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object",
              "description": "The model with `name` and `value` properties."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Generated value string for x-www-form-urlencoded form."
          }
        },
        {
          "name": "stringToArray",
          "description": "Parse input string to array of x-www-form-urlencoded form parameters.\n\nThis function will not url-decode names and values. Please, use\n`this.decodeUrlEncoded(this.stringToArray(str))` to create an array\nof decoded parameters.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 152,
              "column": 4
            },
            "end": {
              "line": 166,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input",
              "type": "String",
              "description": "A string of HTTP x-www-form-urlencoded parameters"
            }
          ],
          "return": {
            "type": "Array.<Object>",
            "desc": "An array of params with `name` and `value` keys."
          }
        },
        {
          "name": "_createParamsArray",
          "description": "Converts a string to an array with objects containing name and value keys",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 172,
              "column": 4
            },
            "end": {
              "line": 209,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input",
              "type": "String",
              "description": "An input string"
            }
          ],
          "return": {
            "type": "Array.<Object>",
            "desc": "An array of params with `name` and `value` keys."
          }
        },
        {
          "name": "_appendArrayResult",
          "description": "Appends form data parameter to an array.\nIf the parameter already exists in the array it creates an array for\nthe value onstead of appending the same parameter.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 220,
              "column": 4
            },
            "end": {
              "line": 236,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "array",
              "type": "Array",
              "description": "An array to append the parameter"
            },
            {
              "name": "name",
              "type": "String",
              "description": "Name of the form data parameter"
            },
            {
              "name": "value",
              "type": "String",
              "description": "Value of the form data parameter"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Updated array"
          }
        },
        {
          "name": "encodeUrlEncoded",
          "description": "Encode payload to x-www-form-urlencoded string.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 243,
              "column": 4
            },
            "end": {
              "line": 259,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input",
              "type": "(Array.<object> | String)",
              "description": "An input data."
            }
          ],
          "return": {
            "type": "(Array.<object> | String)"
          }
        },
        {
          "name": "_encodeValue",
          "description": "URL encodes a value.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 4
            },
            "end": {
              "line": 275,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(String | Array.<String>)",
              "description": "Value to encode. Either string or\narray of strings."
            }
          ],
          "return": {
            "type": "(String | Array.<String>)",
            "desc": "Encoded value. The same type as the input."
          }
        },
        {
          "name": "decodeUrlEncoded",
          "description": "Decode x-www-form-urlencoded data.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 282,
              "column": 4
            },
            "end": {
              "line": 298,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input",
              "type": "(Array.<object> | String)",
              "description": "An input data."
            }
          ],
          "return": {
            "type": "(Array.<object> | String)"
          }
        },
        {
          "name": "_decodeValue",
          "description": "URL decodes a value.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 306,
              "column": 4
            },
            "end": {
              "line": 314,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(String | Array.<String>)",
              "description": "Value to decode. Either string or\narray of strings."
            }
          ],
          "return": {
            "type": "(String | Array.<String>)",
            "desc": "Decoded value. The same type as the input."
          }
        },
        {
          "name": "_paramValue",
          "description": "Parse input string as a payload param key or value.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 321,
              "column": 4
            },
            "end": {
              "line": 328,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input",
              "type": "String",
              "description": "An input to parse."
            }
          ],
          "return": {
            "type": "String"
          }
        },
        {
          "name": "_paramLineToFormObject",
          "description": "Parse a line of key=value http params into an object with `name` and `value` keys.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 336,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input",
              "type": "String",
              "description": "A input line of x-www-form-urlencoded text tike `param=value`"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "A parsed object with `name` and `value` keys."
          }
        },
        {
          "name": "encodeQueryString",
          "description": "Returns a string where all characters that are not valid for a URL\ncomponent have been escaped. The escaping of a character is done by\nconverting it into its UTF-8 encoding and then encoding each of the\nresulting bytes as a %xx hexadecimal escape sequence.\n\nNote: this method will convert any space character into its escape\nshort form, '+' rather than %20. It should therefore only be used for\nquery-string parts.\n\nThe following character sets are **not** escaped by this method:\n- ASCII digits or letters\n- ASCII punctuation characters: ```- _ . ! ~ * ' ( )</pre>```\n\nNotice that this method <em>does</em> encode the URL component delimiter\ncharacters:<blockquote>\n\n```\n; / ? : & = + $ , #\n```",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 380,
              "column": 4
            },
            "end": {
              "line": 386,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str",
              "type": "String",
              "description": "A string containing invalid URL characters"
            }
          ],
          "return": {
            "type": "String",
            "desc": "a string with all invalid URL characters escaped"
          }
        },
        {
          "name": "decodeQueryString",
          "description": "Returns a string where all URL component escape sequences have been\nconverted back to their original character representations.\n\nNote: this method will convert the space character escape short form, '+',\ninto a space. It should therefore only be used for query-string parts.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 397,
              "column": 4
            },
            "end": {
              "line": 403,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str",
              "type": "String",
              "description": "string containing encoded URL component sequences"
            }
          ],
          "return": {
            "type": "String",
            "desc": "string with no encoded URL component encoded sequences"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 29,
          "column": 7
        },
        "end": {
          "line": 406,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "ArcBehaviors.PayloadParserMixin",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    }
  ]
}
